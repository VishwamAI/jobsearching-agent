name: Python application

on:
  push:
    branches: [ main, setup-project-structure, feature/auto-apply, fix-ci-cd-errors ]
  pull_request:
    branches: [ main, setup-project-structure, feature/auto-apply, fix-ci-cd-errors ]
  workflow_dispatch:

jobs:
  build:

    runs-on: ubuntu-latest
    env:
      DATABASE_URL: sqlite:///home/runner/work/jobsearching-agent/jobsearching_agent.db
      PYTHONPATH: venv/lib/python3.8/site-packages:./src:./scripts:./

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.8'

    - name: Make CI/CD workflow script executable
      run: chmod +x ./scripts/ci_cd_workflow.sh

    - name: Create, activate virtual environment, and install dependencies
      run: |
        python -m venv venv
        source venv/bin/activate
        python -m pip install --upgrade pip
        python -m pip install -r requirements.txt
        python -m pip install beautifulsoup4
        python -m pip install pandas
        python -m pip install scikit-learn==1.3.2
      env:
        PYTHONPATH: venv/lib/python3.8/site-packages:./src:./scripts:./

    - name: List installed packages
      run: venv/bin/pip list

    - name: Check for pandas installation
      run: venv/bin/python -c "import pandas; print(pandas.__version__)"

    - name: Print Python interpreter location
      run: venv/bin/python -c "import sys; print(sys.executable)"

    - name: Print Python path
      run: venv/bin/python -c "import sys; print(sys.path)"

    - name: Check for models directory and contents
      run: ls -R models

    - name: Activate virtual environment and lint with flake8
      run: |
        source venv/bin/activate
        python -m flake8 src tests
      env:
        PYTHONPATH: venv/lib/python3.8/site-packages:./src:./scripts:./

    - name: Activate virtual environment and list installed packages before running tests
      run: |
        source venv/bin/activate
        pip list

    - name: Activate virtual environment and print Python version before running tests
      run: |
        source venv/bin/activate
        python --version

    - name: Activate virtual environment and print Python path before running tests
      run: |
        source venv/bin/activate
        python -c "import sys; print(sys.path)"

    - name: Print DATABASE_URL before running tests
      run: |
        echo "DATABASE_URL=${{ env.DATABASE_URL }}"
        export DATABASE_URL=${{ env.DATABASE_URL }}

    - name: Create data directory
      run: mkdir -p /home/runner/work/jobsearching-agent/jobsearching-agent/data

    - name: Set permissions for data directory
      run: chmod -R 777 /home/runner/work/jobsearching-agent/jobsearching-agent/data

    - name: Print contents of data directory before setting up database schema
      run: ls -la /home/runner/work/jobsearching-agent/jobsearching-agent/data/

    - name: Activate virtual environment and set up database schema
      run: |
        source venv/bin/activate
        python scripts/create_db_schema.py
        echo "Database schema setup completed."
        ls -la /home/runner/work/jobsearching-agent/jobsearching-agent/data/
        sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db .tables
        sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "SELECT name FROM sqlite_master WHERE type='table';"
        sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "PRAGMA table_info(candidates);"
        sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "SELECT * FROM candidates;"
        echo "Contents of database file after schema setup:"
        sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "SELECT * FROM candidates;"
      env:
        PYTHONPATH: venv/lib/python3.8/site-packages:./src:./scripts:./

    - name: Print DATABASE_URL before running tests
      run: echo "DATABASE_URL=${{ env.DATABASE_URL }}"

    - name: Check inode number and contents of data directory after setting up database schema
      run: |
        echo "Inode number of database file after setting up schema:"
        ls -i /home/runner/work/jobsearching-agent/jobsearching_agent.db || echo "Database file not found after schema setup."
        echo "Contents of data directory after setting up database schema:"
        ls -la /home/runner/work/jobsearching-agent/jobsearching-agent/data/
        echo "Tables in the database after setting up schema:"
        sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db .tables
        sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "SELECT name FROM sqlite_master WHERE type='table';"
        sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "PRAGMA table_info(candidates);"
        sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "SELECT * FROM candidates;"
        echo "Inode number of database file before running tests:"
        ls -i /home/runner/work/jobsearching-agent/jobsearching_agent.db || echo "Database file not found before running tests."

    - name: Check database schema setup and print contents before running tests
      run: |
        echo "DATABASE_URL=${{ env.DATABASE_URL }}"
        export DATABASE_URL=${{ env.DATABASE_URL }}
        echo "Checking database file existence and contents before running tests:"
        if [ -f /home/runner/work/jobsearching-agent/jobsearching_agent.db ]; then
          echo "Database file exists."
          ls -la /home/runner/work/jobsearching-agent/jobsearching_agent.db
          echo "Tables in the database before running tests:"
          sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db .tables
          sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "SELECT name FROM sqlite_master WHERE type='table';"
          sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "PRAGMA table_info(candidates);"
          echo "Contents of candidates table before running tests:"
          sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "SELECT * FROM candidates;"
          echo "Contents of database file before running tests:"
          sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "SELECT * FROM candidates;"
        else
          echo "Database file does not exist."
        fi

    - name: Print contents of database file before running tests
      run: |
        echo "Contents of database file before running tests:"
        sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "SELECT * FROM candidates;"
      env:
        PYTHONPATH: venv/lib/python3.8/site-packages:./src:./scripts:./

    - name: Check database file status before running tests
      run: |
        echo "Checking database file status before running tests:"
        if [ -f /home/runner/work/jobsearching-agent/jobsearching_agent.db ]; then
          echo "Database file exists."
          ls -la /home/runner/work/jobsearching-agent/jobsearching_agent.db
          echo "Tables in the database before running tests:"
          sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db .tables
          sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "SELECT name FROM sqlite_master WHERE type='table';"
          sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "PRAGMA table_info(candidates);"
          echo "Contents of candidates table before running tests:"
          sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "SELECT * FROM candidates;"
        else
          echo "Database file does not exist."
        fi

    - name: Print current working directory before running tests
      run: pwd

    - name: Activate virtual environment and run tests with pytest
      run: |
        source venv/bin/activate
        echo "Contents of data directory before running tests:"
        ls -la /home/runner/work/jobsearching-agent/jobsearching-agent/data/
        echo "Tables in the database before running tests:"
        sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db .tables
        sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "SELECT name FROM sqlite_master WHERE type='table';"
        sqlite3 /home/runner/work/jobsearching-agent/jobsearching_agent.db "PRAGMA table_info(candidates);"
        echo "Checking database file existence and permissions before running tests:"
        if [ -f /home/runner/work/jobsearching-agent/jobsearching-agent/data/test_jobsearching_agent.db ]; then
          echo "Database file exists."
          ls -la /home/runner/work/jobsearching-agent/jobsearching-agent/data/test_jobsearching_agent.db
        else
          echo "Database file does not exist."
        fi
        export DATABASE_URL=${{ env.DATABASE_URL }}
        echo "DATABASE_URL=${{ env.DATABASE_URL }}"
        python -m pytest
      env:
        PYTHONPATH: venv/lib/python3.8/site-packages:./src:./scripts:./

    - name: Activate virtual environment and test prediction functionality
      run: |
        source venv/bin/activate
        python scripts/predict_job_level.py
      env:
        PYTHONPATH: venv/lib/python3.8/site-packages:./src:./scripts:./
